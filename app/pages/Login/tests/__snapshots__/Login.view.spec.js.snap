// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SignupView snapshots Scenario 1 matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginPage
    actions={
      Object {
        "loginUser": [MockFunction],
      }
    }
    classes={Object {}}
    history={
      Object {
        "push": [MockFunction],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <WithStyles(CssBaseline) />,
        <main>
          <WithStyles(Paper)>
            <WithStyles(Avatar)>
              <pure(LockOutlinedIcon) />
            </WithStyles(Avatar)>
            <WithStyles(Typography)
              variant="h5"
            >
              Sign in to PlaceList
            </WithStyles(Typography)>
            <form>
              <WithStyles(FormControl)
                fullWidth={true}
                margin="normal"
                required={true}
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="email"
                >
                  Email Address
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  autoComplete="email"
                  autoFocus={true}
                  id="email"
                  name="email"
                  onChange={[Function]}
                  value=""
                />
              </WithStyles(FormControl)>
              <WithStyles(FormControl)
                fullWidth={true}
                margin="normal"
                required={true}
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="password"
                >
                  Password
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  autoComplete="current-password"
                  id="password"
                  name="password"
                  onChange={[Function]}
                  type="password"
                  value=""
                />
              </WithStyles(FormControl)>
              <WithStyles(Button)
                color="primary"
                fullWidth={true}
                onClick={[Function]}
                type="submit"
                variant="contained"
              >
                Sign in
              </WithStyles(Button)>
            </form>
            <p>
              New User?
              <Link
                replace={false}
                to="/signup"
              >
                <WithStyles(Button)
                  color="primary"
                  size="small"
                >
                  Sign Up
                </WithStyles(Button)>
              </Link>
            </p>
          </WithStyles(Paper)>
        </main>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Paper)>
            <WithStyles(Avatar)>
              <pure(LockOutlinedIcon) />
            </WithStyles(Avatar)>
            <WithStyles(Typography)
              variant="h5"
            >
              Sign in to PlaceList
            </WithStyles(Typography)>
            <form>
              <WithStyles(FormControl)
                fullWidth={true}
                margin="normal"
                required={true}
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="email"
                >
                  Email Address
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  autoComplete="email"
                  autoFocus={true}
                  id="email"
                  name="email"
                  onChange={[Function]}
                  value=""
                />
              </WithStyles(FormControl)>
              <WithStyles(FormControl)
                fullWidth={true}
                margin="normal"
                required={true}
              >
                <WithStyles(WithFormControlContext(InputLabel))
                  htmlFor="password"
                >
                  Password
                </WithStyles(WithFormControlContext(InputLabel))>
                <WithStyles(Input)
                  autoComplete="current-password"
                  id="password"
                  name="password"
                  onChange={[Function]}
                  type="password"
                  value=""
                />
              </WithStyles(FormControl)>
              <WithStyles(Button)
                color="primary"
                fullWidth={true}
                onClick={[Function]}
                type="submit"
                variant="contained"
              >
                Sign in
              </WithStyles(Button)>
            </form>
            <p>
              New User?
              <Link
                replace={false}
                to="/signup"
              >
                <WithStyles(Button)
                  color="primary"
                  size="small"
                >
                  Sign Up
                </WithStyles(Button)>
              </Link>
            </p>
          </WithStyles(Paper)>,
          "className": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Avatar)>
                <pure(LockOutlinedIcon) />
              </WithStyles(Avatar)>,
              <WithStyles(Typography)
                variant="h5"
              >
                Sign in to PlaceList
              </WithStyles(Typography)>,
              <form>
                <WithStyles(FormControl)
                  fullWidth={true}
                  margin="normal"
                  required={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="email"
                  >
                    Email Address
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    autoComplete="email"
                    autoFocus={true}
                    id="email"
                    name="email"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
                <WithStyles(FormControl)
                  fullWidth={true}
                  margin="normal"
                  required={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="password"
                  >
                    Password
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    autoComplete="current-password"
                    id="password"
                    name="password"
                    onChange={[Function]}
                    type="password"
                    value=""
                  />
                </WithStyles(FormControl)>
                <WithStyles(Button)
                  color="primary"
                  fullWidth={true}
                  onClick={[Function]}
                  type="submit"
                  variant="contained"
                >
                  Sign in
                </WithStyles(Button)>
              </form>,
              <p>
                New User?
                <Link
                  replace={false}
                  to="/signup"
                >
                  <WithStyles(Button)
                    color="primary"
                    size="small"
                  >
                    Sign Up
                  </WithStyles(Button)>
                </Link>
              </p>,
            ],
            "className": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <pure(LockOutlinedIcon) />,
                "className": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Sign in to PlaceList",
                "variant": "h5",
              },
              "ref": null,
              "rendered": "Sign in to PlaceList",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(FormControl)
                    fullWidth={true}
                    margin="normal"
                    required={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="email"
                    >
                      Email Address
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      autoComplete="email"
                      autoFocus={true}
                      id="email"
                      name="email"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>,
                  <WithStyles(FormControl)
                    fullWidth={true}
                    margin="normal"
                    required={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="password"
                    >
                      Password
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      autoComplete="current-password"
                      id="password"
                      name="password"
                      onChange={[Function]}
                      type="password"
                      value=""
                    />
                  </WithStyles(FormControl)>,
                  <WithStyles(Button)
                    color="primary"
                    fullWidth={true}
                    onClick={[Function]}
                    type="submit"
                    variant="contained"
                  >
                    Sign in
                  </WithStyles(Button)>,
                  false,
                ],
                "className": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="email"
                      >
                        Email Address
                      </WithStyles(WithFormControlContext(InputLabel))>,
                      <WithStyles(Input)
                        autoComplete="email"
                        autoFocus={true}
                        id="email"
                        name="email"
                        onChange={[Function]}
                        value=""
                      />,
                    ],
                    "fullWidth": true,
                    "margin": "normal",
                    "required": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Email Address",
                        "htmlFor": "email",
                      },
                      "ref": null,
                      "rendered": "Email Address",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "autoComplete": "email",
                        "autoFocus": true,
                        "id": "email",
                        "name": "email",
                        "onChange": [Function],
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="password"
                      >
                        Password
                      </WithStyles(WithFormControlContext(InputLabel))>,
                      <WithStyles(Input)
                        autoComplete="current-password"
                        id="password"
                        name="password"
                        onChange={[Function]}
                        type="password"
                        value=""
                      />,
                    ],
                    "fullWidth": true,
                    "margin": "normal",
                    "required": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Password",
                        "htmlFor": "password",
                      },
                      "ref": null,
                      "rendered": "Password",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "autoComplete": "current-password",
                        "id": "password",
                        "name": "password",
                        "onChange": [Function],
                        "type": "password",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Sign in",
                    "className": undefined,
                    "color": "primary",
                    "fullWidth": true,
                    "onClick": [Function],
                    "type": "submit",
                    "variant": "contained",
                  },
                  "ref": null,
                  "rendered": "Sign in",
                  "type": [Function],
                },
                false,
              ],
              "type": "form",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "New User?",
                  <Link
                    replace={false}
                    to="/signup"
                  >
                    <WithStyles(Button)
                      color="primary"
                      size="small"
                    >
                      Sign Up
                    </WithStyles(Button)>
                  </Link>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "New User?",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <WithStyles(Button)
                      color="primary"
                      size="small"
                    >
                      Sign Up
                    </WithStyles(Button)>,
                    "className": undefined,
                    "replace": false,
                    "to": "/signup",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Sign Up",
                      "color": "primary",
                      "size": "small",
                    },
                    "ref": null,
                    "rendered": "Sign Up",
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": "p",
            },
          ],
          "type": [Function],
        },
        "type": "main",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <WithStyles(CssBaseline) />,
          <main>
            <WithStyles(Paper)>
              <WithStyles(Avatar)>
                <pure(LockOutlinedIcon) />
              </WithStyles(Avatar)>
              <WithStyles(Typography)
                variant="h5"
              >
                Sign in to PlaceList
              </WithStyles(Typography)>
              <form>
                <WithStyles(FormControl)
                  fullWidth={true}
                  margin="normal"
                  required={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="email"
                  >
                    Email Address
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    autoComplete="email"
                    autoFocus={true}
                    id="email"
                    name="email"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
                <WithStyles(FormControl)
                  fullWidth={true}
                  margin="normal"
                  required={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="password"
                  >
                    Password
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    autoComplete="current-password"
                    id="password"
                    name="password"
                    onChange={[Function]}
                    type="password"
                    value=""
                  />
                </WithStyles(FormControl)>
                <WithStyles(Button)
                  color="primary"
                  fullWidth={true}
                  onClick={[Function]}
                  type="submit"
                  variant="contained"
                >
                  Sign in
                </WithStyles(Button)>
              </form>
              <p>
                New User?
                <Link
                  replace={false}
                  to="/signup"
                >
                  <WithStyles(Button)
                    color="primary"
                    size="small"
                  >
                    Sign Up
                  </WithStyles(Button)>
                </Link>
              </p>
            </WithStyles(Paper)>
          </main>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Paper)>
              <WithStyles(Avatar)>
                <pure(LockOutlinedIcon) />
              </WithStyles(Avatar)>
              <WithStyles(Typography)
                variant="h5"
              >
                Sign in to PlaceList
              </WithStyles(Typography)>
              <form>
                <WithStyles(FormControl)
                  fullWidth={true}
                  margin="normal"
                  required={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="email"
                  >
                    Email Address
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    autoComplete="email"
                    autoFocus={true}
                    id="email"
                    name="email"
                    onChange={[Function]}
                    value=""
                  />
                </WithStyles(FormControl)>
                <WithStyles(FormControl)
                  fullWidth={true}
                  margin="normal"
                  required={true}
                >
                  <WithStyles(WithFormControlContext(InputLabel))
                    htmlFor="password"
                  >
                    Password
                  </WithStyles(WithFormControlContext(InputLabel))>
                  <WithStyles(Input)
                    autoComplete="current-password"
                    id="password"
                    name="password"
                    onChange={[Function]}
                    type="password"
                    value=""
                  />
                </WithStyles(FormControl)>
                <WithStyles(Button)
                  color="primary"
                  fullWidth={true}
                  onClick={[Function]}
                  type="submit"
                  variant="contained"
                >
                  Sign in
                </WithStyles(Button)>
              </form>
              <p>
                New User?
                <Link
                  replace={false}
                  to="/signup"
                >
                  <WithStyles(Button)
                    color="primary"
                    size="small"
                  >
                    Sign Up
                  </WithStyles(Button)>
                </Link>
              </p>
            </WithStyles(Paper)>,
            "className": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Avatar)>
                  <pure(LockOutlinedIcon) />
                </WithStyles(Avatar)>,
                <WithStyles(Typography)
                  variant="h5"
                >
                  Sign in to PlaceList
                </WithStyles(Typography)>,
                <form>
                  <WithStyles(FormControl)
                    fullWidth={true}
                    margin="normal"
                    required={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="email"
                    >
                      Email Address
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      autoComplete="email"
                      autoFocus={true}
                      id="email"
                      name="email"
                      onChange={[Function]}
                      value=""
                    />
                  </WithStyles(FormControl)>
                  <WithStyles(FormControl)
                    fullWidth={true}
                    margin="normal"
                    required={true}
                  >
                    <WithStyles(WithFormControlContext(InputLabel))
                      htmlFor="password"
                    >
                      Password
                    </WithStyles(WithFormControlContext(InputLabel))>
                    <WithStyles(Input)
                      autoComplete="current-password"
                      id="password"
                      name="password"
                      onChange={[Function]}
                      type="password"
                      value=""
                    />
                  </WithStyles(FormControl)>
                  <WithStyles(Button)
                    color="primary"
                    fullWidth={true}
                    onClick={[Function]}
                    type="submit"
                    variant="contained"
                  >
                    Sign in
                  </WithStyles(Button)>
                </form>,
                <p>
                  New User?
                  <Link
                    replace={false}
                    to="/signup"
                  >
                    <WithStyles(Button)
                      color="primary"
                      size="small"
                    >
                      Sign Up
                    </WithStyles(Button)>
                  </Link>
                </p>,
              ],
              "className": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <pure(LockOutlinedIcon) />,
                  "className": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Sign in to PlaceList",
                  "variant": "h5",
                },
                "ref": null,
                "rendered": "Sign in to PlaceList",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <WithStyles(FormControl)
                      fullWidth={true}
                      margin="normal"
                      required={true}
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="email"
                      >
                        Email Address
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        autoComplete="email"
                        autoFocus={true}
                        id="email"
                        name="email"
                        onChange={[Function]}
                        value=""
                      />
                    </WithStyles(FormControl)>,
                    <WithStyles(FormControl)
                      fullWidth={true}
                      margin="normal"
                      required={true}
                    >
                      <WithStyles(WithFormControlContext(InputLabel))
                        htmlFor="password"
                      >
                        Password
                      </WithStyles(WithFormControlContext(InputLabel))>
                      <WithStyles(Input)
                        autoComplete="current-password"
                        id="password"
                        name="password"
                        onChange={[Function]}
                        type="password"
                        value=""
                      />
                    </WithStyles(FormControl)>,
                    <WithStyles(Button)
                      color="primary"
                      fullWidth={true}
                      onClick={[Function]}
                      type="submit"
                      variant="contained"
                    >
                      Sign in
                    </WithStyles(Button)>,
                    false,
                  ],
                  "className": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(WithFormControlContext(InputLabel))
                          htmlFor="email"
                        >
                          Email Address
                        </WithStyles(WithFormControlContext(InputLabel))>,
                        <WithStyles(Input)
                          autoComplete="email"
                          autoFocus={true}
                          id="email"
                          name="email"
                          onChange={[Function]}
                          value=""
                        />,
                      ],
                      "fullWidth": true,
                      "margin": "normal",
                      "required": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Email Address",
                          "htmlFor": "email",
                        },
                        "ref": null,
                        "rendered": "Email Address",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "autoComplete": "email",
                          "autoFocus": true,
                          "id": "email",
                          "name": "email",
                          "onChange": [Function],
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <WithStyles(WithFormControlContext(InputLabel))
                          htmlFor="password"
                        >
                          Password
                        </WithStyles(WithFormControlContext(InputLabel))>,
                        <WithStyles(Input)
                          autoComplete="current-password"
                          id="password"
                          name="password"
                          onChange={[Function]}
                          type="password"
                          value=""
                        />,
                      ],
                      "fullWidth": true,
                      "margin": "normal",
                      "required": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "children": "Password",
                          "htmlFor": "password",
                        },
                        "ref": null,
                        "rendered": "Password",
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "autoComplete": "current-password",
                          "id": "password",
                          "name": "password",
                          "onChange": [Function],
                          "type": "password",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Sign in",
                      "className": undefined,
                      "color": "primary",
                      "fullWidth": true,
                      "onClick": [Function],
                      "type": "submit",
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": "Sign in",
                    "type": [Function],
                  },
                  false,
                ],
                "type": "form",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "New User?",
                    <Link
                      replace={false}
                      to="/signup"
                    >
                      <WithStyles(Button)
                        color="primary"
                        size="small"
                      >
                        Sign Up
                      </WithStyles(Button)>
                    </Link>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "New User?",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <WithStyles(Button)
                        color="primary"
                        size="small"
                      >
                        Sign Up
                      </WithStyles(Button)>,
                      "className": undefined,
                      "replace": false,
                      "to": "/signup",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Sign Up",
                        "color": "primary",
                        "size": "small",
                      },
                      "ref": null,
                      "rendered": "Sign Up",
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                ],
                "type": "p",
              },
            ],
            "type": [Function],
          },
          "type": "main",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`SignupView styles matches snapshot 1`] = `
Object {
  "avatar": Object {
    "backgroundColor": "#000",
    "margin": 10,
  },
  "errorText": Object {
    "margin": 5,
    "textAlign": "center",
  },
  "form": Object {
    "marginTop": 10,
    "width": "100%",
  },
  "layout": Object {
    "display": "block",
    "marginLeft": 30,
    "marginRight": 30,
    "undefined": Object {
      "marginLeft": "auto",
      "marginRight": "auto",
      "width": 400,
    },
    "width": "auto",
  },
  "link": Object {
    "textDecoration": "none",
  },
  "paper": Object {
    "alignItems": "center",
    "display": "flex",
    "flexDirection": "column",
    "marginTop": 80,
    "padding": "20px 30px 30px",
  },
  "submit": Object {
    "marginTop": 30,
  },
}
`;
